/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alatnet.gmod;

import java.util.ArrayList;

/**
 *
 * @author alatnet
 */
public class Settings extends javax.swing.JDialog {
    private String gmpublishPath, gmpublishProgram, gmadPath, gmadProgram;
    private boolean convertFilenames, openBrowserOnCreate, queueAutoRemove, sQueueAutoRemove, sQueueEnable, sQueueUploadDelayE;
    private int sQueueDelay, sQueueNumThreads, sQueueRetry, sQueueUploadDelayI;
    
    boolean pressOK=false,pathsPressOK=false;
    
    /**
     * Creates new form Settings
     */
    public Settings(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        chkSmartQueueEnable = new javax.swing.JCheckBox();
        spinSmartQueueDelay = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spinSmartQueueRetry = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spinSmartQueueNumThreads = new javax.swing.JSpinner();
        chkSQ_AutoRemove = new javax.swing.JCheckBox();
        chkUploadRetryDelay = new javax.swing.JCheckBox();
        spinUploadRetryDelay = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        chkConvertFilenames = new javax.swing.JCheckBox();
        chkOpenBrowserOnCreate = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        chkJLAF = new javax.swing.JCheckBox();
        cmbxJLAF = new javax.swing.JComboBox();
        btnSetPaths = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        chkQ_AutoRemove = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GMPU Settings");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Smart Queue"));

        chkSmartQueueEnable.setText("Enable");
        chkSmartQueueEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSmartQueueEnableActionPerformed(evt);
            }
        });

        spinSmartQueueDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(300), Integer.valueOf(120), null, Integer.valueOf(1)));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chkSmartQueueEnable, org.jdesktop.beansbinding.ELProperty.create("${selected}"), spinSmartQueueDelay, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel1.setText("Upload Delay: ");

        jLabel2.setText("Seconds");

        jLabel3.setText("Upload Retry: ");

        spinSmartQueueRetry.setModel(new javax.swing.SpinnerNumberModel(5, 0, 10, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chkSmartQueueEnable, org.jdesktop.beansbinding.ELProperty.create("${selected}"), spinSmartQueueRetry, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel4.setText("Times");

        jLabel5.setText("Number of Threads: ");

        spinSmartQueueNumThreads.setModel(new javax.swing.SpinnerNumberModel(5, 1, 10, 1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chkSmartQueueEnable, org.jdesktop.beansbinding.ELProperty.create("${selected}"), spinSmartQueueNumThreads, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        chkSQ_AutoRemove.setText("Auto Remove Completed Actions");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chkSmartQueueEnable, org.jdesktop.beansbinding.ELProperty.create("${selected}"), chkSQ_AutoRemove, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        chkUploadRetryDelay.setText("Upload Retry Delay:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chkSmartQueueEnable, org.jdesktop.beansbinding.ELProperty.create("${selected}"), chkUploadRetryDelay, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        chkUploadRetryDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUploadRetryDelayActionPerformed(evt);
            }
        });

        spinUploadRetryDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(30), Integer.valueOf(30), null, Integer.valueOf(1)));

        jLabel6.setText("Seconds");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(chkUploadRetryDelay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinUploadRetryDelay))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinSmartQueueDelay)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkSQ_AutoRemove)
                            .addComponent(chkSmartQueueEnable))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinSmartQueueNumThreads))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinSmartQueueRetry, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(chkSmartQueueEnable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spinSmartQueueDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinSmartQueueRetry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkUploadRetryDelay)
                    .addComponent(spinUploadRetryDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(spinSmartQueueNumThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSQ_AutoRemove))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Misc"));

        chkConvertFilenames.setText("Convert Filenames to Lowercase");

        chkOpenBrowserOnCreate.setText("Open Web Browser on Addon Creation Success");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Java Look and Feel (Requires Restart)"));

        chkJLAF.setText("Use Look and Feel");

        ArrayList<String> lafList=new ArrayList<>();
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { lafList.add(info.getName()); }
        cmbxJLAF.setModel(new javax.swing.DefaultComboBoxModel(lafList.toArray()));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chkJLAF, org.jdesktop.beansbinding.ELProperty.create("${selected}"), cmbxJLAF, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(chkJLAF)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(cmbxJLAF, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(chkJLAF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbxJLAF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkConvertFilenames)
                            .addComponent(chkOpenBrowserOnCreate))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(chkConvertFilenames)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkOpenBrowserOnCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSetPaths.setText("Set Paths");
        btnSetPaths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetPathsActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Queue"));

        chkQ_AutoRemove.setText("Auto Removed Completed Actions");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkQ_AutoRemove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chkQ_AutoRemove)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel))
                    .addComponent(btnSetPaths, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSetPaths)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSetPathsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetPathsActionPerformed
        GmodPaths paths = new GmodPaths(null,true);
        paths.setData(this.gmpublishPath, this.gmpublishProgram, this.gmadPath, this.gmadProgram);
        paths.setVisible(true);
        this.gmadProgram = paths.getGmadProgram();
        this.gmadPath = paths.getGmadPath();
        this.gmpublishProgram = paths.getGmpublishProgram();
        this.gmpublishPath = paths.getGmpublishPath();
        this.pathsPressOK=paths.pressedOK();
    }//GEN-LAST:event_btnSetPathsActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        this.convertFilenames=this.chkConvertFilenames.isSelected();
        this.openBrowserOnCreate=this.chkOpenBrowserOnCreate.isSelected();
        this.queueAutoRemove=this.chkQ_AutoRemove.isSelected();
        this.sQueueAutoRemove=this.chkSQ_AutoRemove.isSelected();
        this.sQueueEnable=this.chkSmartQueueEnable.isSelected();
        this.sQueueDelay=(int)this.spinSmartQueueDelay.getValue();
        this.sQueueNumThreads=(int)this.spinSmartQueueNumThreads.getValue();
        this.sQueueRetry=(int)this.spinSmartQueueRetry.getValue();
        this.sQueueUploadDelayI=(int)this.spinUploadRetryDelay.getValue();
        this.sQueueUploadDelayE=this.chkUploadRetryDelay.isSelected();
        this.pressOK=true;
        this.dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chkUploadRetryDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUploadRetryDelayActionPerformed
        this.spinUploadRetryDelay.setEnabled(this.chkSmartQueueEnable.isSelected() && this.chkUploadRetryDelay.isSelected());
    }//GEN-LAST:event_chkUploadRetryDelayActionPerformed

    private void chkSmartQueueEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSmartQueueEnableActionPerformed
        this.spinUploadRetryDelay.setEnabled(this.chkSmartQueueEnable.isSelected() && this.chkUploadRetryDelay.isSelected());
    }//GEN-LAST:event_chkSmartQueueEnableActionPerformed

    public boolean pressedOK(){ return this.pressOK; }
    public boolean pathsPressedOK(){ return this.pathsPressOK; }
    
    public void setBooleanData(boolean convertFilenames, boolean openBrowserOnCreate, boolean queueAutoRemove, boolean sQueueAutoRemove, boolean sQueueEnable, boolean sQueueUploadDelayE){
        this.chkConvertFilenames.setSelected(convertFilenames);
        this.chkOpenBrowserOnCreate.setSelected(openBrowserOnCreate);
        this.chkQ_AutoRemove.setSelected(queueAutoRemove);
        this.chkSQ_AutoRemove.setSelected(sQueueAutoRemove);
        this.chkSmartQueueEnable.setSelected(sQueueEnable);
        this.chkUploadRetryDelay.setSelected(sQueueUploadDelayE);
        this.convertFilenames=convertFilenames;
        this.openBrowserOnCreate=openBrowserOnCreate;
        this.queueAutoRemove=queueAutoRemove;
        this.sQueueAutoRemove=sQueueAutoRemove;
        this.sQueueEnable=sQueueEnable;
        this.sQueueUploadDelayE=sQueueUploadDelayE;
        this.spinUploadRetryDelay.setEnabled(this.chkSmartQueueEnable.isSelected() && this.chkUploadRetryDelay.isSelected());
    }
    public boolean getConvertFileNames(){ return this.convertFilenames; }
    public boolean getOpenBrowserOnCreate(){ return this.openBrowserOnCreate; }
    public boolean getQueueAutoRemove(){ return this.queueAutoRemove; }
    public boolean getSQueueAutoRemove(){ return this.sQueueAutoRemove; }
    public boolean getSQueueEnable(){ return this.sQueueEnable; }
    public boolean getSQueueUploadRetryDelayE(){ return this.sQueueUploadDelayE; }
    
    public void setSpinData(int sQueueDelay, int sQueueNumThreads, int sQueueRetry, int sQueueUploadDelayI){
        this.spinSmartQueueDelay.setValue(sQueueDelay);
        this.spinSmartQueueNumThreads.setValue(sQueueNumThreads);
        this.spinSmartQueueRetry.setValue(sQueueRetry);
        this.spinUploadRetryDelay.setValue(sQueueUploadDelayI);
        this.sQueueDelay=sQueueDelay;
        this.sQueueNumThreads=sQueueNumThreads;
        this.sQueueRetry=sQueueRetry;
        this.sQueueUploadDelayI=sQueueUploadDelayI;
    }
    public int getSQueueDelay(){ return this.sQueueDelay; }
    public int getSQueueNumThreads(){ return this.sQueueNumThreads; }
    public int getSQueueRetry(){ return this.sQueueRetry; }
    public int getSQueueUploadRetryDelayI() { return this.sQueueUploadDelayI; }
    
    public void setPathsData(String gmpublishPath, String gmpublishProgram, String gmadPath, String gmadProgram){
        this.gmadPath = gmadPath;
        this.gmadProgram = gmadProgram;
        this.gmpublishPath = gmpublishPath;
        this.gmpublishProgram = gmpublishProgram;
        /*this.txtGmadPath.setText(gmadPath);
        this.txtGmadProgram.setText(gmadProgram);
        this.txtGmpublishPath.setText(gmpublishPath);
        this.txtGmpublishProgram.setText(gmpublishProgram);*/
    }
    public String getGmpublishPath(){
        return this.gmpublishPath;
    }
    public String getGmpublishProgram(){
        return this.gmpublishProgram;
    }
    public String getGmadPath(){
        return this.gmadPath;
    }
    public String getGmadProgram(){
        return this.gmadProgram;
    }
    
    public void setLookAndFeelData(boolean jLAF_Enabled, String jLAF_Text){
        this.chkJLAF.setSelected(jLAF_Enabled);
        
        javax.swing.DefaultComboBoxModel model = (javax.swing.DefaultComboBoxModel)this.cmbxJLAF.getModel();
        for (int i=0;i<model.getSize();i++){
            if (model.getElementAt(i).toString().equals(jLAF_Text)){
                this.cmbxJLAF.setSelectedIndex(i);
                break;
            }
        }
    }
    public boolean getJLAF_Enabled(){ return this.chkJLAF.isSelected(); }
    public String getJLAF_Text(){ return this.cmbxJLAF.getSelectedItem().toString(); }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Settings dialog = new Settings(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSetPaths;
    private javax.swing.JCheckBox chkConvertFilenames;
    private javax.swing.JCheckBox chkJLAF;
    private javax.swing.JCheckBox chkOpenBrowserOnCreate;
    private javax.swing.JCheckBox chkQ_AutoRemove;
    private javax.swing.JCheckBox chkSQ_AutoRemove;
    private javax.swing.JCheckBox chkSmartQueueEnable;
    private javax.swing.JCheckBox chkUploadRetryDelay;
    private javax.swing.JComboBox cmbxJLAF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner spinSmartQueueDelay;
    private javax.swing.JSpinner spinSmartQueueNumThreads;
    private javax.swing.JSpinner spinSmartQueueRetry;
    private javax.swing.JSpinner spinUploadRetryDelay;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
